









1.context.xml에 컨넥션풀 추가
<Resource auth="Container" 
    driverClassName="oracle.jdbc.driver.OracleDriver" 
    maxActive="50" 
    maxWait="1000" 
    name="jdbc/Oracle11g_bms_mybatis" 
    password="tiger" 
    type="javax.sql.DataSource" 
    url="jdbc:oracle:thin:@Localhost:1521:xe" 
    username="bms_mybatis"/>
    
2.프로젝트 생성 > new Spring Legacy Project > 프로젝트명, Spring MVC Project 선택 > 패키지명(3레벨)입력
패키지명 입력은 3레벨이상을 해야하며, 3ㄹ레벨이 컨텍스트명이된다.

3.web.xml에 한글 안깨지도록 처리 
<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
4.spring.mvc.board_mybatis 패키지에 controller,service,persistence,vo 폴더 생성후
4-1 컨트롤러 클래스 소스 작성(서블릿 아님)
	new > class > MemberController
	
	@Controller 추가
	클래스명
	
4-2 서비스 클래스 작성
	
	@Service 추가
	클래스명
	
4-3 DAO 클래스 작성
	@Repository 추가
	클래스명
	
4-4 Mybatis 설정
0)
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.1.3.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>

1)mvnrepository.com에서 라이브러리를 복사후 pom.xml에 등록해서 빌드되도록한다.
	 maven 중앙 repository로부터 다운로드후 빌드되어 .m2.repository에 저장된다.
	mybatis-spring,spring-jdbc,mybatis,spring-test추가
	<repositories>
	    <repository>
	        <id>oracle</id>
	        <name>ORACLE JDBC Repository</name>
	        <url>https://maven.atlassian.com/3rdparty/</url>
	    </repository>
	</repositories>
	 
	<dependency>
	    <groupId>com.oracle</groupId>
	    <artifactId>ojdbc6</artifactId>
	    <version>12.1.0.1-atlassian-hosted</version>
	</dependency>
		
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
	
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.3.RELEASE</version>
	</dependency>
	
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>5.1.3.RELEASE</version>
	    <scope>test</scope>
	</dependency>
	
	
	
	

4-5 VO 작성

4-6. 나머지 JSP_mvcMember 소스복사해서 views 폴더에 붙여넣는다.

4-7 script.js.css , 이미지 파일들은 /webapp/resources 폴더에 붙여넣는다
	setting.jsp 수정
	jsp파일내의 이동jsp의.do삭제

5. Mapper 패키지 작성
	src/main.resources 폴더에 package 작성: mappers.ch01.mapper
	
6.servlet-context.xml에 mybatis 설정
	<!-- Mybatis 설정시작 -->
	<beans:bean name="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<!-- context.xml의 컨넥션풀loockup -->
		<beans:property name="jndiName" value="java:comp/env/jdbc/Oracle11g_mybatis"></beans:property>
		<beans:property name="resourceRef" value="true"></beans:property>
	</beans:bean>
	
	<beans:bean id="splSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath:mappers/**/*.xml" /><!-- Mybatis xml경로  -->
	</beans:bean>
	
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="splSessionFactory"></beans:constructor-arg>
	</beans:bean>
	
	<!-- Mybatis 설정종료 -->
	
7.Mapper 작성 - 패키지 위 우클릭
	1)new > other > xml file > sqlMapper.xml 생성
	
	2)mybatis.org//링크에서 복사
	
	<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    -->boardMapper.xml에 붙여넣는다
    
    3)<mapper namespace="spring.mvc.mybatis.persistance.MemberDAO">
    
    ----------------------------------------------------------------------------------
	
8. oracle 계정 생성 및 테이블 생성
	CREATE USER mybatis IDENTIFIED BY mybatis DEFAULT TABLESPACE users;

	GRANT CONNECT, RESOURCE TO mybatis;
	
	ALTER USER mybatis ACCOUNT UNLOCK;

    
CREATE TABLE member(
    user_id NUMBER PRIMARY KEY,
    user_name NVARCHAR2(30),
    reg_date DATE
);

INSERT INTO member VALUES(1, 'john', sysdate);

INSERT INTO member VALUES(2, 'terry', sysdate);

commit;

SELECT * FROM member ORDER BY user_id;

-----------------------------------------

DROP TABLE address CASCADE CONSTRAINTS;

CREATE TABLE address(
    user_id NUMBER,
    address NVARCHAR2(30),
    CONSTRAINT address_user_id_if FOREIGN KEY(user_id) REFERENCES member(user_id)
);

INSERT INTO address VALUES(1, '서울시 강서구 마곡동');
INSERT INTO address VALUES(2, '서울시 금천구 독산동');


-----------------------------------

DROP TABLE posts CASCADE CONSTRAINTS;

CREATE TABLE posts (
    post_id     NUMBER  PRIMARY KEY,
    post_title  NVARCHAR2(60),
    post_content NVARCHAR2(120),
    user_id         NUMBER,
    CONSTRAINT posts_user_id_if FOREIGN KEY(user_id) REFERENCES member(user_id)
);

INSERT INTO posts VALUES(100, '평화', '비핵화', 1);
INSERT INTO posts VALUES(101, '사랑', '너와 나의 연결고리', 1);
INSERT INTO posts VALUES(102, '비빔밥', '동학농민항쟁이 만든 음식', 1);
INSERT INTO posts VALUES(103, '월드컵', '가즈아 16강', 2);
INSERT INTO posts VALUES(104, '김치', '밤의 연결고리', 2);
commit;

SELECT * FROM posts;

SELECT m.user_id, m.user_name, m.reg_date, a.address
    FROM member m JOIN address a
    ON m.user_id = a.user_id
    ORDER BY m.user_id;

    
	